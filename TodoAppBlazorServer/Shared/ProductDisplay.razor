@using LMS.Services;
@using LMS.Models;
@using LMS.Pages;
@inject IModalService model

<div class="productDisplay">
    <p>@Product_Name </p>
    <p>@Quantity</p>
    <p>@ExpirationDate</p>

        <div class="buttonContainer">
            <button @onclick="RemoveQuantity"><i class="material-icons">delete</i></button>
            <button @onclick="EditExpirationDate"><i class="material-icons">edit_calendar</i></button>
            <button @onclick="MoveProduct"><i class="material-icons">input</i></button>
        </div>
 
</div> 


@code {
    [Parameter]
    public string? Product_Name { get; set; }

    [Parameter]
    public int Quantity { get; set; }

    [Parameter]
    public DateOnly ExpirationDate { get; set; }

    [Parameter]
    public EventCallback<string> OnProductRemoved { get; set; }

    [Parameter]
    public EventCallback<string> OnProductMoved { get; set; }

    [Parameter]
    public EventCallback<DateOnly> OnExpirationDateChanged { get; set; }


    private async Task EditExpirationDate()
    {
        var parameters = new ModalParameters()
        .Add(nameof(ExpirationDatePopup.ProductName), Product_Name)
        .Add(nameof(ExpirationDatePopup.ExpirationDate), ExpirationDate);

        var messageForm = model.Show<ExpirationDatePopup>("Edit Expiration Date", parameters);
        var result = await messageForm.Result;

        if (result.Confirmed)
        {
            ExpirationDate = (DateOnly) result.Data;
            await OnExpirationDateChanged.InvokeAsync(ExpirationDate);
            StateHasChanged();
        }
    }

    private async Task RemoveQuantity()
    {
        await OnProductRemoved.InvokeAsync(Product_Name);
        StateHasChanged();
    }

    private async Task MoveProduct()
    {
        await OnProductMoved.InvokeAsync(Product_Name);
        StateHasChanged();
    }

}
