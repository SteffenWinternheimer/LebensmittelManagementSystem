@using LMS.Services;
@using LMS.Models;
@using LMS.Pages;
@inject IModalService model

<div style="margin-top: 30px" class="productDisplay @SetExpirationDateColorCoding() ">
    <p>@Product.Product_Name </p>
    <p>@Product.Quantity</p>
    <p>@Product.ExpiryDate</p>
    <p>@Product.Barcode</p>

        <div class="buttonContainer">
            <button @onclick="RemoveQuantity"><i class="material-icons">delete</i></button>
            <button @onclick="EditExpirationDate"><i class="material-icons">edit_calendar</i></button>
            <button @onclick="RenameProduct"><i class="material-icons">edit</i></button>
            <button @onclick="MoveProduct"><i class="material-icons">input</i></button>
        </div>
 
</div> 


@code {
    [Parameter]
    public Product? Product{ get; set; }

    [Parameter]
    public EventCallback<Product> OnProductRemoved { get; set; }

    [Parameter]
    public EventCallback<Product> OnProductMoved { get; set; }

    [Parameter]
    public EventCallback<string> OnProductRenamed { get; set; }

    [Parameter]
    public EventCallback<DateOnly> OnExpirationDateChanged { get; set; }

    protected override void OnInitialized()
    {
        SetExpirationDateColorCoding();
    }

    private string SetExpirationDateColorCoding()
    {        
        DateOnly currentDate = DateOnly.FromDateTime(DateTime.Today);

        if (Product.ExpiryDate >= currentDate.AddDays(7)) // 7 - infinite days
        {
            return "expirationDateGreen";
        }
        else if (Product.ExpiryDate >= currentDate.AddDays(3)) // 3 - 6 days
        {
            return "expirationDateYellow";
        }
        else if (Product.ExpiryDate >= currentDate.AddDays(1)) // 1 - 2 days
        {
            return "expirationDateOrange";
        }
        else if (Product.ExpiryDate == currentDate) // today
        {
            return "expirationDateRed"; 
        }
        else
        {
            return "expirationDatePurple"; // expired
        }
    }


    private async Task RenameProduct()
    {
        var parameters = new ModalParameters()
        .Add(nameof(RenameProductPopup.ProductName), Product.Product_Name);

        var messageForm = model.Show<RenameProductPopup>("Rename Product", parameters);
        var result = await messageForm.Result;

        if (result.Confirmed)
        {
            Product.Product_Name = (string)result.Data;
            await OnProductRenamed.InvokeAsync(Product.Product_Name);
            StateHasChanged();
        }
    }

    private async Task EditExpirationDate()
    {
        var parameters = new ModalParameters()
        .Add(nameof(ExpirationDatePopup.ProductName), Product.Product_Name)
        .Add(nameof(ExpirationDatePopup.ExpirationDate), Product.ExpiryDate);

        var messageForm = model.Show<ExpirationDatePopup>("Edit Expiration Date", parameters);
        var result = await messageForm.Result;

        if (result.Confirmed)
        {
            Product.ExpiryDate = (DateOnly)result.Data;
            await OnExpirationDateChanged.InvokeAsync(Product.ExpiryDate);
            StateHasChanged();
        }
    }

    private async Task RemoveQuantity()
    {
        await OnProductRemoved.InvokeAsync(Product);
        StateHasChanged();
    }

    private async Task MoveProduct()
    {
        await OnProductMoved.InvokeAsync(Product);
        StateHasChanged();
    }

}
