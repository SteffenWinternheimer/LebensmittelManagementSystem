@using LMS.Services;
@using LMS.Shared;
@using LMS.Models;
@using LMS.Pages;


<ProductForm OnItemAdded="@ItemAdded" OnItemSearched="@ItemSearched" OnItemSearchCleared="@ClearItemSearch"></ProductForm>

<div>
    <label>
        <input type="radio" name="sortList" value=1 bind="sortedOption" @onchange="OnOptionChanged" /> Name
    </label>
    <label>
        <input type="radio" name="sortList" value=2 bind="sortedOption" @onchange="OnOptionChanged" /> MHD
    </label>
</div>



@if (!isSearchingForProduct)
{
    @foreach (Product product in FoodList)
    {
        <ProductDisplay Product="@product"OnProductRemoved="@RemoveProduct" OnProductRenamed="@(newName => RenameProductName(product.Product_Name, newName))" OnExpirationDateChanged="@(date => EditExpirationDate(product.Product_Name,date))" OnProductMoved="@MoveProductToOtherList" />
    }
}
else
{
    @foreach (Product product in SearchedProducts)
    {
        <ProductDisplay Product="@product" OnProductRemoved="@RemoveProduct" OnProductRenamed="@(newName => RenameProductName(product.Product_Name, newName))" OnExpirationDateChanged="@(date => EditExpirationDate(product.Product_Name,date))" OnProductMoved="@MoveProductToOtherList" />
    }
}

@code {
    private int sortedOption = 1;

    [Parameter]
    public List<Product> FoodList{ get; set; }

    [Parameter]
    public ListTypesEnum.ListTypes This_ListType { get; set; }

    [Parameter]
    public ListTypesEnum.ListTypes Other_ListType { get; set; }

    [Parameter]
    public List<Product> SearchedProducts { get; set; }

    bool isSearchingForProduct = false;


    // Method that will be triggered when the radio button selection changes
    private void OnOptionChanged(ChangeEventArgs e)
    {
        sortedOption = int.Parse(e.Value.ToString());
        SortListBySelection();
    }

    private void SortListBySelection()
    {
        switch(sortedOption)
        {
            case 1:
                FoodList = ProductService.SortListByName(FoodList);
                break;
            case 2:
                FoodList = ProductService.SortListByExpirationDate(FoodList);
                break;
        }
    }


    private void ItemAdded(Product product)
    {
        if (product.Product_Name == null) return;

        if(This_ListType == ListTypesEnum.ListTypes.ShoppingList) ProductService.AddItemToShoppingList(product);
        else ProductService.AddItemToFoodStock(product);
        StateHasChanged();
        OnInitialized();
    }


    private void ItemSearched(string searchString)
    {
        if (searchString == null) return;
        isSearchingForProduct = true;
        SearchedProducts = ProductService.SearchProduct(searchString, This_ListType);
        StateHasChanged();
    }

    private void ClearItemSearch()
    {
        isSearchingForProduct = false;
        SearchedProducts = new List<Product>();
        StateHasChanged();
    }


    private long GetUPC(Product product)
    {
        return ProductService.GetUPC(product, This_ListType);
    }

    private DateOnly GetLatestExpirationDate(string productName)
    {
        return ProductService.GetLatestExpirationDate(productName, This_ListType);
    }

    private void RenameProductName(string productName, string newProductName)
    {
        ProductService.RenameProduct(productName, newProductName, This_ListType);
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        isSearchingForProduct = false;
    }

    private void EditExpirationDate(string productName, DateOnly expirationDate)
    {
        ProductService.UpdateExpirationDateToProduct(productName, expirationDate, This_ListType);
        StateHasChanged();
    }

    private void RemoveProduct(Product productToRemove)
    {
        ProductService.RemoveProduct(productToRemove, This_ListType);
    }

    private void MoveProductToOtherList(Product product)
    {
        ProductService.MoveProduct(product, Other_ListType);
        RemoveProduct(product);
        StateHasChanged();
    }
}
